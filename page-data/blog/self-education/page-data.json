{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/self-education/","result":{"data":{"markdownRemark":{"html":"<p>In the few paragraphs below I'd like to briefly outline my journey as a self-taught software engineer and some of the lessons imparted thus far. It all started some years ago when I decided to embark on the path of becoming a professional nerd. The decision was based entirely on logic: software engineers earn a good living, the job is respectable and has room for growth plus there's always the potential for remote work. Like most newbies, I believed that after a few online courses and some fizzbuzz problems I'd be ready to kickstart my career. Ignorance really is bliss.</p>\n<p>I remember right off the bat I had some strange subconscious refusal to go through a bootcamp. Previously I had worked as a teacher in one of the local schools in Saigon and it made me realize that the institution of education is all too often an impediment to education itself. Plus there was something to be said about striking out on your own and charting your own course through the unknown. Be careful what you wish for, you just might get it. After a few months of self-education I felt like a man swimming in the middle of the ocean. There was no way to tell if I was headed in a straight line or going in circles. Absolutley no sense of direction. The quest for answers on the open internet all too often provided more questions than answers. Everyone had a different opinion. Every tutorial course had it's own unique blend of package-dependencies which, absent a sound knowledge of fundamental principles, made it very tough to blend them into my own projects. And of course every question on Stackoverflow was met with a generous portion of not-so-subtle contempt.</p>\n<p>This bumper car crash course went on for quite some time- almost a year until I got my first big breakthrough; a paid internship at a local startup. Turns out sitting at home, self studying, drowning in coffee and applying for every junior position on LinkedIn is not the way to go. The way to go is beer with friends at the local bar. It just so happened that night one of our mutual friends knew a guy who ran a startup and, perhaps due to the generous pint sizes they were serving that night, he passed me his direct contact details. At this point I had applied to something like 70 - 100 different positions without much response. But for some reason this time the door opened. I met Tony, founder of Reclub, the next week and got my first paid position as a junior software engineer. They gave me my own MacBook and I felt like I had just made partner at Google. I was no longer a Youtube-tutorial-hell-wannabe-coder, now I was legit; a backend engineer at a real company. At least that's how I felt for about 3 days until the assignments started coming in. I quickly realized that all my online courses, books and calculator/to-do sandbox projects did little to prepare me for real work. I had to simultaneously learn new platforms, languages and a host of other new tools with the expectation that my knowledge would be at a production-level within weeks. Talk about the imposter syndrome. It was like learning how to swim in the deep end of a pool filled with sharks and crocodiles after briefly reading up on what water is in a tattered magazine. The pace never slackened. I was learning how to design new API endpoints and create new data-tables based on user feedback which formed the core of our product iteration. I was learning about separation of concerns and that it's better to separate the client from the server to minimize complexity and reduce error. I was learning how to write a team generating algorithm which would create teams as evenly as possible based on gender, age and skill level. I was learning all this after having completed a few introduction level courses and a few YT tutorials on how to write the most basic syntax for Javascript (before the internship my first language was Python). This drink-from-a-firehose approach proved extremely valuable in the sense of gaining an immediate understanding of what production level work looked like.</p>\n<p>The other big lesson was mentorship. The amount of education information available to us today is massive, affordable, and marketed well enough to make you believe a $12 course will have you competing on par with Elon Musk after 5 weeks. But there is no sub for a good mentor. I was lucky enough to work for a company where our founder came from a deep engineering background and had the all the front office skills to boot. Tony had all the hats: engineer, entrepreneur, designer, mentor, athlete. The amount of work constantly on his plate was incredible and seeing it all managed from a short distance gave me a good idea of the effort required to stay competitive, both in and outside the company.</p>\n<p>Our startup, Reclub, provided a way for teams or groups to self-organize local sporting events. We sought to improve our users' experience in playing team sports by abstracting away some of the common nuisances like trying to figure out who was next on the waiting list in the WhatsApp or Messenger group among many other functions. Our typical iteration cycle was every month at the end of which we would all sit down and sift through our users' feedback. After a few ideas were selected we would begin to condense theory into reality by having our QA create mock-ups of what the new features would look like on screen. We would then create data-tables based on these data points and once we had the client mockups and their respective tables in the DB the next step writing the API. This was my area of responsibility. I would write basic CRUD API functions and test them relentlessly with Postman and our own Sandbox tools. Our API was spread out across three layers: api, service and data. It took me months to understand the purpose and benefit of this structure and I am thankful Tony had the patience he did with me all the while juggling the myriad of challenges in running a startup. I remember this incredible feeling of frustration the first several months that was much like pushing a wall. Nothing moved. Nothing moved for the first 5 months I was there when, due to sheer volume of effort and error, I slowly began to wrap my head around how the backend was supposed to function. That was one of the most important breakthroughs I had so far- the point where you realize that you CAN do something. It's no longer a question of \"if\" just \"when\". And of course it's always an amazing feeling to contribute results and watch them go live at the end of each sprint.</p>\n<p>I came away with some very valuable lessons which I hope can serve me well in my future career: what production results look like, what it takes to solve problems without distracting others from their job, understanding your scope of work in the context of the product and learning quickly enough to convert knowledge into solid contribution. For anyone who reads this and is on a similar path of self-development, it would be interesting to hear your thoughts on the subject, especially what you consider to be the single most valuable asset in your self development.</p>","frontmatter":{"title":"Self Taught","author":"Igor Tatarinov","date":"07 February, 2021"},"excerpt":"In the few paragraphs below I'd like to briefly outline my journey as a self-taught software engineer and some of the lessons imparted thusâ€¦","timeToRead":5}},"pageContext":{"slug":"/blog/self-education/","templatePath":"./src/templates/blog-post.js"}}}